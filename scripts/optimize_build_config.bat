@echo off
setlocal enabledelayedexpansion
REM Build Configuration Optimization Script for Game Engine Kiro
REM Fine-tunes Ninja parallel build settings and vcpkg cache settings for optimal performance

echo ========================================
echo Game Engine Kiro - Build Configuration Optimizer
echo ========================================
echo.

REM Detect system capabilities
echo Detecting system capabilities...
call :detect_system_specs

REM Optimize Ninja configuration
echo Optimizing Ninja parallel build settings...
call :optimize_ninja_config

REM Optimize vcpkg cache configuration
echo Optimizing vcpkg cache settings...
call :optimize_vcpkg_cache

REM Update CMakePresets.json with optimized settings
echo Updating CMakePresets.json with optimized settings...
call :update_cmake_presets

echo.
echo ========================================
echo Build Configuration Optimization Complete!
echo ========================================
echo.
echo Optimizations Applied:
echo   - Ninja parallel jobs: %OPTIMAL_COMPILE_JOBS% compile, %OPTIMAL_LINK_JOBS% link
echo   - vcpkg cache: Optimized for %CACHE_SIZE_MB%MB cache
echo   - Memory usage: Configured for %TOTAL_RAM_GB%GB RAM
echo.
echo Recommendations:
if %TOTAL_RAM_GB% lss 8 (
    echo   - Consider upgrading RAM for better build performance
)
if %CPU_CORES% lss 4 (
    echo   - Consider upgrading CPU for better parallel compilation
)
echo   - Use Ninja generator for fastest builds: --ninja flag
echo   - Monitor build performance with: .\scripts\benchmark_build_performance.bat

goto :end

:detect_system_specs
echo   Detecting CPU cores and memory...

REM Get number of logical processors
set "CPU_CORES=%NUMBER_OF_PROCESSORS%"
if not defined CPU_CORES set "CPU_CORES=4"

REM Get total physical memory using PowerShell (more reliable for large amounts)
for /f %%a in ('powershell -command "[math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum / 1GB)"') do (
    set "TOTAL_RAM_GB=%%a"
    goto :ram_detected
)

REM Fallback method using wmic if PowerShell fails
for /f "tokens=2 delims==" %%a in ('wmic computersystem get TotalPhysicalMemory /value 2^>nul ^| findstr "="') do (
    if not "%%a"=="" (
        REM Use PowerShell to handle the large number conversion
        for /f %%b in ('powershell -command "[math]::Round(%%a / 1GB)"') do (
            set "TOTAL_RAM_GB=%%b"
            goto :ram_detected
        )
    )
)

REM Final fallback
set "TOTAL_RAM_GB=8"

:ram_detected

REM Calculate optimal job counts based on system specs
call :calculate_optimal_jobs

echo   CPU Cores: %CPU_CORES%
echo   Total RAM: %TOTAL_RAM_GB%GB
echo   Optimal compile jobs: %OPTIMAL_COMPILE_JOBS%
echo   Optimal link jobs: %OPTIMAL_LINK_JOBS%

goto :eof

:calculate_optimal_jobs
REM Calculate optimal job counts based on system specifications

REM Compile jobs: Use most cores but leave some for system
if %CPU_CORES% leq 4 (
    set "OPTIMAL_COMPILE_JOBS=%CPU_CORES%"
) else if %CPU_CORES% leq 8 (
    set /a OPTIMAL_COMPILE_JOBS=%CPU_CORES%-1
) else (
    set /a OPTIMAL_COMPILE_JOBS=%CPU_CORES%-2
)

REM Link jobs: Linking is memory-intensive, limit based on RAM
if %TOTAL_RAM_GB% lss 8 (
    set "OPTIMAL_LINK_JOBS=1"
) else if %TOTAL_RAM_GB% lss 16 (
    set "OPTIMAL_LINK_JOBS=2"
) else if %TOTAL_RAM_GB% lss 32 (
    set "OPTIMAL_LINK_JOBS=4"
) else if %TOTAL_RAM_GB% lss 64 (
    set "OPTIMAL_LINK_JOBS=6"
) else (
    REM For 64GB+ systems, can handle more parallel linking
    set "OPTIMAL_LINK_JOBS=8"
)

REM Ensure minimum values
if %OPTIMAL_COMPILE_JOBS% lss 1 set "OPTIMAL_COMPILE_JOBS=1"
if %OPTIMAL_LINK_JOBS% lss 1 set "OPTIMAL_LINK_JOBS=1"

REM Calculate cache size based on available RAM
if %TOTAL_RAM_GB% lss 8 (
    set "CACHE_SIZE_MB=512"
) else if %TOTAL_RAM_GB% lss 16 (
    set "CACHE_SIZE_MB=1024"
) else if %TOTAL_RAM_GB% lss 32 (
    set "CACHE_SIZE_MB=2048"
) else if %TOTAL_RAM_GB% lss 64 (
    set "CACHE_SIZE_MB=4096"
) else (
    REM For 64GB+ systems, can use larger cache
    set "CACHE_SIZE_MB=8192"
)

goto :eof

:optimize_ninja_config
echo   Configuring Ninja for optimal performance...

REM Set Ninja-specific environment variables for optimal performance
set "NINJA_STATUS=[%%f/%%t %%es] "
set "NINJA_PARALLEL_JOBS=%OPTIMAL_COMPILE_JOBS%"

REM Create ninja configuration file
echo # Ninja Configuration for Game Engine Kiro > .ninja_config
echo # Auto-generated by optimize_build_config.bat >> .ninja_config
echo # >> .ninja_config
echo # Parallel job configuration >> .ninja_config
echo compile_jobs = %OPTIMAL_COMPILE_JOBS% >> .ninja_config
echo link_jobs = %OPTIMAL_LINK_JOBS% >> .ninja_config
echo # >> .ninja_config
echo # Performance optimizations >> .ninja_config
echo use_deps_log = true >> .ninja_config
echo use_compiler_deps = true >> .ninja_config

echo   Ninja configuration saved to .ninja_config

goto :eof

:optimize_vcpkg_cache
echo   Optimizing vcpkg binary cache settings...

REM Create optimized vcpkg cache directory structure
set "VCPKG_CACHE_DIR=%USERPROFILE%\.vcpkg-cache"
if not exist "%VCPKG_CACHE_DIR%" mkdir "%VCPKG_CACHE_DIR%"

REM Create cache subdirectories for better organization
if not exist "%VCPKG_CACHE_DIR%\packages" mkdir "%VCPKG_CACHE_DIR%\packages"
if not exist "%VCPKG_CACHE_DIR%\temp" mkdir "%VCPKG_CACHE_DIR%\temp"

REM Set optimal cache configuration based on system specs
if %TOTAL_RAM_GB% geq 64 (
    set "VCPKG_CACHE_MODE=readwrite"
    set "VCPKG_MAX_CONCURRENCY=%OPTIMAL_COMPILE_JOBS%"
    echo   High-end system detected - enabling aggressive caching
) else if %TOTAL_RAM_GB% geq 16 (
    set "VCPKG_CACHE_MODE=readwrite"
    set /a "VCPKG_MAX_CONCURRENCY=%OPTIMAL_COMPILE_JOBS%/2"
) else (
    set "VCPKG_CACHE_MODE=read"
    set "VCPKG_MAX_CONCURRENCY=2"
)

REM Note: vcpkg-configuration.json is not created as it can interfere with existing vcpkg setup
REM The project already has a working vcpkg.json manifest that should be used instead

echo   vcpkg cache optimized for %CACHE_SIZE_MB%MB cache size
echo   Cache mode: %VCPKG_CACHE_MODE%
echo   Max concurrency: %VCPKG_MAX_CONCURRENCY%

goto :eof

:update_cmake_presets
echo   Updating CMakePresets.json with optimized settings...

REM Backup original CMakePresets.json
if exist "CMakePresets.json" (
    copy "CMakePresets.json" "CMakePresets.json.backup" >nul
    echo   Backup created: CMakePresets.json.backup
)

REM Create optimized CMakePresets.json
call :create_optimized_presets

echo   CMakePresets.json updated with optimized settings

goto :eof

:create_optimized_presets
REM Create optimized CMakePresets.json with dynamic job configuration

echo { > CMakePresets.json
echo     "version": 6, >> CMakePresets.json
echo     "configurePresets": [ >> CMakePresets.json

REM Visual Studio presets (unchanged for compatibility)
echo         { >> CMakePresets.json
echo             "name": "vs-debug", >> CMakePresets.json
echo             "displayName": "VS 2022 - Debug", >> CMakePresets.json
echo             "generator": "Visual Studio 17 2022", >> CMakePresets.json
echo             "binaryDir": "${sourceDir}/build/vs/x64/Debug", >> CMakePresets.json
echo             "architecture": { >> CMakePresets.json
echo                 "value": "x64" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "cacheVariables": { >> CMakePresets.json
echo                 "CMAKE_TOOLCHAIN_FILE": "${sourceDir}/vcpkg/scripts/buildsystems/vcpkg.cmake", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD": "20", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD_REQUIRED": "ON", >> CMakePresets.json
echo                 "CMAKE_EXPORT_COMPILE_COMMANDS": "ON" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "environment": { >> CMakePresets.json
echo                 "VCPKG_FEATURE_FLAGS": "manifests,binarycaching,versions", >> CMakePresets.json
echo                 "VCPKG_BINARY_SOURCES": "files,$env{USERPROFILE}/.vcpkg-cache,%VCPKG_CACHE_MODE%", >> CMakePresets.json
echo                 "VCPKG_MAX_CONCURRENCY": "%VCPKG_MAX_CONCURRENCY%" >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "vs-release", >> CMakePresets.json
echo             "displayName": "VS 2022 - Release", >> CMakePresets.json
echo             "generator": "Visual Studio 17 2022", >> CMakePresets.json
echo             "binaryDir": "${sourceDir}/build/vs/x64/Release", >> CMakePresets.json
echo             "architecture": { >> CMakePresets.json
echo                 "value": "x64" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "cacheVariables": { >> CMakePresets.json
echo                 "CMAKE_TOOLCHAIN_FILE": "${sourceDir}/vcpkg/scripts/buildsystems/vcpkg.cmake", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD": "20", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD_REQUIRED": "ON", >> CMakePresets.json
echo                 "CMAKE_EXPORT_COMPILE_COMMANDS": "ON" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "environment": { >> CMakePresets.json
echo                 "VCPKG_FEATURE_FLAGS": "manifests,binarycaching,versions", >> CMakePresets.json
echo                 "VCPKG_BINARY_SOURCES": "files,$env{USERPROFILE}/.vcpkg-cache,%VCPKG_CACHE_MODE%", >> CMakePresets.json
echo                 "VCPKG_MAX_CONCURRENCY": "%VCPKG_MAX_CONCURRENCY%" >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json

REM Optimized Ninja presets
echo         { >> CMakePresets.json
echo             "name": "ninja-debug", >> CMakePresets.json
echo             "displayName": "Ninja - Debug (MSVC, Optimized)", >> CMakePresets.json
echo             "generator": "Ninja", >> CMakePresets.json
echo             "binaryDir": "${sourceDir}/build/ninja/x64/Debug", >> CMakePresets.json
echo             "cacheVariables": { >> CMakePresets.json
echo                 "CMAKE_BUILD_TYPE": "Debug", >> CMakePresets.json
echo                 "CMAKE_TOOLCHAIN_FILE": "${sourceDir}/vcpkg/scripts/buildsystems/vcpkg.cmake", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD": "20", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD_REQUIRED": "ON", >> CMakePresets.json
echo                 "CMAKE_EXPORT_COMPILE_COMMANDS": "ON", >> CMakePresets.json
echo                 "CMAKE_JOB_POOLS": "compile=%OPTIMAL_COMPILE_JOBS%;link=%OPTIMAL_LINK_JOBS%", >> CMakePresets.json
echo                 "CMAKE_JOB_POOL_COMPILE": "compile", >> CMakePresets.json
echo                 "CMAKE_JOB_POOL_LINK": "link", >> CMakePresets.json
echo                 "CMAKE_DEPENDS_USE_COMPILER": "ON", >> CMakePresets.json
echo                 "CMAKE_VERBOSE_MAKEFILE": "OFF", >> CMakePresets.json
echo                 "CMAKE_COLOR_MAKEFILE": "ON", >> CMakePresets.json
echo                 "CMAKE_UNITY_BUILD": "OFF" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "environment": { >> CMakePresets.json
echo                 "VCPKG_FEATURE_FLAGS": "manifests,binarycaching,versions", >> CMakePresets.json
echo                 "VCPKG_BINARY_SOURCES": "files,$env{USERPROFILE}/.vcpkg-cache,%VCPKG_CACHE_MODE%", >> CMakePresets.json
echo                 "VCPKG_MAX_CONCURRENCY": "%VCPKG_MAX_CONCURRENCY%", >> CMakePresets.json
echo                 "NINJA_STATUS": "[%%f/%%t %%es] ", >> CMakePresets.json
echo                 "NINJA_PARALLEL_JOBS": "%OPTIMAL_COMPILE_JOBS%" >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-release", >> CMakePresets.json
echo             "displayName": "Ninja - Release (MSVC, Optimized)", >> CMakePresets.json
echo             "generator": "Ninja", >> CMakePresets.json
echo             "binaryDir": "${sourceDir}/build/ninja/x64/Release", >> CMakePresets.json
echo             "cacheVariables": { >> CMakePresets.json
echo                 "CMAKE_BUILD_TYPE": "Release", >> CMakePresets.json
echo                 "CMAKE_TOOLCHAIN_FILE": "${sourceDir}/vcpkg/scripts/buildsystems/vcpkg.cmake", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD": "20", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD_REQUIRED": "ON", >> CMakePresets.json
echo                 "CMAKE_EXPORT_COMPILE_COMMANDS": "ON", >> CMakePresets.json
echo                 "CMAKE_JOB_POOLS": "compile=%OPTIMAL_COMPILE_JOBS%;link=%OPTIMAL_LINK_JOBS%", >> CMakePresets.json
echo                 "CMAKE_JOB_POOL_COMPILE": "compile", >> CMakePresets.json
echo                 "CMAKE_JOB_POOL_LINK": "link", >> CMakePresets.json
echo                 "CMAKE_DEPENDS_USE_COMPILER": "ON", >> CMakePresets.json
echo                 "CMAKE_VERBOSE_MAKEFILE": "OFF", >> CMakePresets.json
echo                 "CMAKE_COLOR_MAKEFILE": "ON", >> CMakePresets.json
echo                 "CMAKE_UNITY_BUILD": "OFF", >> CMakePresets.json
echo                 "CMAKE_INTERPROCEDURAL_OPTIMIZATION": "ON" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "environment": { >> CMakePresets.json
echo                 "VCPKG_FEATURE_FLAGS": "manifests,binarycaching,versions", >> CMakePresets.json
echo                 "VCPKG_BINARY_SOURCES": "files,$env{USERPROFILE}/.vcpkg-cache,%VCPKG_CACHE_MODE%", >> CMakePresets.json
echo                 "VCPKG_MAX_CONCURRENCY": "%VCPKG_MAX_CONCURRENCY%", >> CMakePresets.json
echo                 "NINJA_STATUS": "[%%f/%%t %%es] ", >> CMakePresets.json
echo                 "NINJA_PARALLEL_JOBS": "%OPTIMAL_COMPILE_JOBS%" >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-relwithdebinfo", >> CMakePresets.json
echo             "displayName": "Ninja - RelWithDebInfo (MSVC, Optimized)", >> CMakePresets.json
echo             "generator": "Ninja", >> CMakePresets.json
echo             "binaryDir": "${sourceDir}/build/ninja/x64/RelWithDebInfo", >> CMakePresets.json
echo             "cacheVariables": { >> CMakePresets.json
echo                 "CMAKE_BUILD_TYPE": "RelWithDebInfo", >> CMakePresets.json
echo                 "CMAKE_TOOLCHAIN_FILE": "${sourceDir}/vcpkg/scripts/buildsystems/vcpkg.cmake", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD": "20", >> CMakePresets.json
echo                 "CMAKE_CXX_STANDARD_REQUIRED": "ON", >> CMakePresets.json
echo                 "CMAKE_EXPORT_COMPILE_COMMANDS": "ON", >> CMakePresets.json
echo                 "CMAKE_JOB_POOLS": "compile=%OPTIMAL_COMPILE_JOBS%;link=%OPTIMAL_LINK_JOBS%", >> CMakePresets.json
echo                 "CMAKE_JOB_POOL_COMPILE": "compile", >> CMakePresets.json
echo                 "CMAKE_JOB_POOL_LINK": "link", >> CMakePresets.json
echo                 "CMAKE_DEPENDS_USE_COMPILER": "ON", >> CMakePresets.json
echo                 "CMAKE_VERBOSE_MAKEFILE": "OFF", >> CMakePresets.json
echo                 "CMAKE_COLOR_MAKEFILE": "ON", >> CMakePresets.json
echo                 "CMAKE_UNITY_BUILD": "OFF", >> CMakePresets.json
echo                 "CMAKE_INTERPROCEDURAL_OPTIMIZATION": "ON" >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "environment": { >> CMakePresets.json
echo                 "VCPKG_FEATURE_FLAGS": "manifests,binarycaching,versions", >> CMakePresets.json
echo                 "VCPKG_BINARY_SOURCES": "files,$env{USERPROFILE}/.vcpkg-cache,%VCPKG_CACHE_MODE%", >> CMakePresets.json
echo                 "VCPKG_MAX_CONCURRENCY": "%VCPKG_MAX_CONCURRENCY%", >> CMakePresets.json
echo                 "NINJA_STATUS": "[%%f/%%t %%es] ", >> CMakePresets.json
echo                 "NINJA_PARALLEL_JOBS": "%OPTIMAL_COMPILE_JOBS%" >> CMakePresets.json
echo             } >> CMakePresets.json
echo         } >> CMakePresets.json
echo     ], >> CMakePresets.json

REM Build presets
echo     "buildPresets": [ >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "vs-debug", >> CMakePresets.json
echo             "configurePreset": "vs-debug", >> CMakePresets.json
echo             "configuration": "Debug" >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "vs-release", >> CMakePresets.json
echo             "configurePreset": "vs-release", >> CMakePresets.json
echo             "configuration": "Release" >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-debug", >> CMakePresets.json
echo             "configurePreset": "ninja-debug", >> CMakePresets.json
echo             "jobs": %OPTIMAL_COMPILE_JOBS% >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-release", >> CMakePresets.json
echo             "configurePreset": "ninja-release", >> CMakePresets.json
echo             "jobs": %OPTIMAL_COMPILE_JOBS% >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-relwithdebinfo", >> CMakePresets.json
echo             "configurePreset": "ninja-relwithdebinfo", >> CMakePresets.json
echo             "jobs": %OPTIMAL_COMPILE_JOBS% >> CMakePresets.json
echo         } >> CMakePresets.json
echo     ], >> CMakePresets.json

REM Test presets
echo     "testPresets": [ >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "vs-debug-test", >> CMakePresets.json
echo             "configurePreset": "vs-debug", >> CMakePresets.json
echo             "configuration": "Debug", >> CMakePresets.json
echo             "output": { >> CMakePresets.json
echo                 "outputOnFailure": true >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "vs-release-test", >> CMakePresets.json
echo             "configurePreset": "vs-release", >> CMakePresets.json
echo             "configuration": "Release", >> CMakePresets.json
echo             "output": { >> CMakePresets.json
echo                 "outputOnFailure": true >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-debug-test", >> CMakePresets.json
echo             "configurePreset": "ninja-debug", >> CMakePresets.json
echo             "output": { >> CMakePresets.json
echo                 "outputOnFailure": true >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "execution": { >> CMakePresets.json
echo                 "jobs": %OPTIMAL_COMPILE_JOBS% >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-release-test", >> CMakePresets.json
echo             "configurePreset": "ninja-release", >> CMakePresets.json
echo             "output": { >> CMakePresets.json
echo                 "outputOnFailure": true >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "execution": { >> CMakePresets.json
echo                 "jobs": %OPTIMAL_COMPILE_JOBS% >> CMakePresets.json
echo             } >> CMakePresets.json
echo         }, >> CMakePresets.json
echo         { >> CMakePresets.json
echo             "name": "ninja-relwithdebinfo-test", >> CMakePresets.json
echo             "configurePreset": "ninja-relwithdebinfo", >> CMakePresets.json
echo             "output": { >> CMakePresets.json
echo                 "outputOnFailure": true >> CMakePresets.json
echo             }, >> CMakePresets.json
echo             "execution": { >> CMakePresets.json
echo                 "jobs": %OPTIMAL_COMPILE_JOBS% >> CMakePresets.json
echo             } >> CMakePresets.json
echo         } >> CMakePresets.json
echo     ] >> CMakePresets.json
echo } >> CMakePresets.json

goto :eof

:end